// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    roomPlayerOne Room[]    @relation("playerOne")
    roomPlayerTwo Room[]    @relation("playerTwo")
    roomWinner    Room[]    @relation("winner")
    score         Int       @default(0)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Room {
    id          String        @id @default(cuid())
    name        String        @unique
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    playerOne   User?         @relation("playerOne", fields: [playerOneId], references: [id])
    playerOneId String?
    playerTwo   User?         @relation("playerTwo", fields: [playerTwoId], references: [id])
    playerTwoId String?
    winner      User?         @relation("winner", fields: [winnerId], references: [id])
    winnerId    String?
    RoomHistory RoomHistory[]
}

model RoomHistory {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    round     Int // 0, 1, ... 8
    positionX Int
    positionY Int
    room      Room     @relation(fields: [roomId], references: [id])
    roomId    String
}
